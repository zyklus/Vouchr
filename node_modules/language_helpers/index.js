var $A = exports.$A = function $A(ary){
	var a = [];

	for(var i=0, l=ary.length; i<l; i++){
		a.push(ary[i]);
	}

	return a;
};

var hasOwn = Object.prototype.hasOwnProperty;

var isFunction = exports.isFunction = function isFunction(obj){ return toString.call(obj) === "[object Function]"; };
var isObject   = exports.isObject   = function isObject  (obj){ return toString.call(obj) === "[object Object]";   };
var isString   = exports.isString   = function isString  (obj){ return toString.call(obj) === "[object String]";   };
var isArray    = exports.isArray    = function isArray   (obj){ return toString.call(obj) === "[object Array]";    };

// from jQuery
var isPlainObject = exports.isPlainObject = function isPlainObject(obj){
	if(!obj || !isObject(obj)){
		return false;
	}

	// Not own constructor property must be Object
	if (obj.constructor &&
		!hasOwn.call(obj, "constructor") &&
		!hasOwn.call(obj.constructor.prototype, "isPrototypeOf")){
		return false;
	}

	// Own properties are enumerated firstly, so to speed up,
	// if last one is own, then all properties are own.
	var key;
	for ( key in obj ) {}

	return key === undefined || hasOwn.call( obj, key );
};

// from jQuery
var isEmptyObject = exports.isEmptyObject = function isEmptyObject(obj){
	for(var name in obj){
		return false;
	}

	return true;
};

// from jQuery
var extend = exports.extend = function extend(){
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction(target) ) {
		target = {};
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( isPlainObject(copy) || (copyIsArray = isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && isArray(src) ? src : [];

					} else {
						clone = src && isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

var each = exports.each = function each(ary, cb){
	for(var i=0, l=ary.length; i<l; i++){
		cb(i, ary[i]);
	}
};

extend(Function.prototype, {
	bind : function() {
		var __method = this, args = $A(arguments), object = args.shift();
		return function() {
			return __method.apply(object || this, args.concat( $A(arguments) ));
		};
	},

	curry : function() {
		var __method = this, args = $A(arguments);
		return function() {
			return __method.apply(this, args.concat($A(arguments)));
		};
	},

	defer : function(time){
		var __method = this;

		setTimeout(function(){ __method.apply(__method); }, time || 1);

		return this;
	}
});

extend(Array, {
	remove : function(ary, val){
		for(var i=ary.length-1; i>=0; i--){
			if(ary[i] === val){ delete ary[i]; }
		}

		return ary;
	}
});

extend(String.prototype, {
	trim : function(){
		return this.replace(/^\s+|\s+$/g, '');
	},

	interpolate : function(hash){
		var out = this, rep;

		(rep = function(hash, root){
			for(n in hash){
				if(typeof(hash[n]) == 'object'){
					rep(hash[n], root + n + '.');
				}else{
					out = out.replace(new RegExp('#\\{' + root + n + '\\}', 'g'), hash[n]);
				}
			}
		})(hash, '');
		return out;
	},

	sprintf : function(){
		var out = this;
		for(var i=0, l=arguments.length; i<l; i++){
			out = out.replace('%s', arguments[i]);
		}
		return out;
	},

	toProperCase : function(){
		var ary = this.split(' ');
		for(var i=0, l=ary.length; i<l; i++){
			ary[i] = ary[i][0].toUpperCase() + ary[i].substr(1).toLowerCase();
		}
		return ary.join(' ');
	},

	toUpperCaseFirst : function(){
		return this[0].toUpperCase() + this.substr(1);
	},
});